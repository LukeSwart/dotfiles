
"  let s:settings.colorscheme = 'zenburn'
"
"
"    " never bdelete a nerd tree
"    if matchstr(expand("%"), 'NERD') == 'NERD'
"      wincmd c
"      return
"    endif



"  " whitespace
"  set backspace=indent,eol,start                      "allow backspacing everything in insert mode
"  set autoindent                                      "automatically indent to match adjacent lines
"  set expandtab                                       "spaces instead of tabs
"  set smarttab                                        "use shiftwidth to enter tabs
"  let &tabstop=s:settings.default_indent              "number of spaces per tab for display
"  let &softtabstop=s:settings.default_indent          "number of spaces per tab in insert mode
"  let &shiftwidth=s:settings.default_indent           "number of spaces when indenting
"  set list                                            "highlight whitespace
"  set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
"  set shiftround
"  set linebreak
"  let &showbreak='↪ '
"
"  set scrolloff=1                                     "always show content after scroll
"  set display+=lastline
"  set wildmenu                                        "show list for autocomplete
"  set wildmode=list:full
"  set wildignorecase
"
"  set splitbelow
"  set splitright
"
"
"  " searching
"  set hlsearch                                        "highlight searches
"  set incsearch                                       "incremental searching
set ignorecase                                      "ignore case for searching
"  set smartcase                                       "do case-sensitive if there's a capital letter
"
"  " vim file/folder management {{{
"    " persistent undo
"    if exists('+undofile')
"      set undofile
"      let &undodir = s:get_cache_dir('undo')
"    endif
"
"    " backups
"    set backup
"    let &backupdir = s:get_cache_dir('backup')
"
"" mappings {{{
"  " formatting shortcuts
"  nmap <leader>fef :call Preserve("normal gg=G")<CR>
"  nmap <leader>f$ :call StripTrailingWhitespace()<CR>
"  vmap <leader>s :sort<cr>
"
"  " eval vimscript by line or visual selection
"  nmap <silent> <leader>e :call Source(line('.'), line('.'))<CR>
"  vmap <silent> <leader>e :call Source(line('v'), line('.'))<CR>
"
"  nnoremap <leader>w :w<cr>
"
"  " toggle paste
"  map <F6> :set invpaste<CR>:set paste?<CR>
"
"  " remap arrow keys
"  nnoremap <left> :bprev<CR>
"  nnoremap <right> :bnext<CR>
"  nnoremap <up> :tabnext<CR>
"  nnoremap <down> :tabprev<CR>

  " smash escape
"  inoremap jk <esc>
"  inoremap kj <esc>
  inoremap jj <esc>

  set clipboard+=unnamed

  " change cursor position in insert mode
"  inoremap <C-h> <left>
"  inoremap <C-l> <right>
"
"  inoremap <C-u> <C-g>u<C-u>

"  " capitalize words
"  if (&tildeop)
"    nmap gcw guw~l
"    nmap gcW guW~l
"    nmap gciw guiw~l
"    nmap gciW guiW~l
"    nmap gcis guis~l
"    nmap gc$ gu$~l
"    nmap gcgc guu~l
"    nmap gcc guu~l
"    vmap gc gu~l
"  else
"    nmap gcw guw~h
"    nmap gcW guW~h
"    nmap gciw guiw~h
"    nmap gciW guiW~h
"    nmap gcis guis~h
"    nmap gc$ gu$~h
"    nmap gcgc guu~h
"    nmap gcc guu~h
"    vmap gc gu~h
"  endif
"  if mapcheck('<space>/') == ''
"    nnoremap <space>/ :vimgrep //gj **/*<left><left><left><left><left><left><left><left>
"  endif
"
"  " sane regex {{{
"    nnoremap / /\v
"    vnoremap / /\v
"    nnoremap ? ?\v
"    vnoremap ? ?\v
"    nnoremap :s/ :s/\v
"  " }}}
"
"  " command-line window {{{
"    nnoremap q: q:i
"    nnoremap q/ q/i
"    nnoremap q? q?i
"  " }}}
"
"  " folds {{{
"    nnoremap zr zr:echo &foldlevel<cr>
"    nnoremap zm zm:echo &foldlevel<cr>
"    nnoremap zR zR:echo &foldlevel<cr>
"    nnoremap zM zM:echo &foldlevel<cr>
"  " }}}

  " screen line scroll
  nnoremap <silent> j gj
  nnoremap <silent> k gk


"  " make Y consistent with C and D. See :help Y.
"  nnoremap Y y$
"
"  " hide annoying quit message
"  nnoremap <C-c> <C-c>:echo<cr>
"
"  " window killer
"  nnoremap <silent> Q :call CloseWindowOrKillBuffer()<cr>
"
"  " quick buffer open
"  nnoremap gb :ls<cr>:e #
"
"  if neobundle#is_sourced('vim-dispatch')
"    nnoremap <leader>tag :Dispatch ctags -R<cr>
"  endif
"
"  " general
"  nmap <leader>l :set list! list?<cr>
"  nnoremap <BS> :set hlsearch! hlsearch?<cr>
"
"  map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"        \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
"        \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
"
"  " helpers for profiling {{{
"    nnoremap <silent> <leader>DD :exe ":profile start profile.log"<cr>:exe ":profile func *"<cr>:exe ":profile file *"<cr>
"    nnoremap <silent> <leader>DP :exe ":profile pause"<cr>
"    nnoremap <silent> <leader>DC :exe ":profile continue"<cr>
"    nnoremap <silent> <leader>DQ :exe ":profile pause"<cr>:noautocmd qall!<cr>
"  "}}}
""}}}
"
"" commands {{{
"  command! -bang Q q<bang>
"  command! -bang QA qa<bang>
"  command! -bang Qa qa<bang>
""}}}
"
"" autocmd {{{
"  " go back to previous position of cursor if any
"  autocmd BufReadPost *
"    \ if line("'\"") > 0 && line("'\"") <= line("$") |
"    \  exe 'normal! g`"zvzz' |
"    \ endif
"
"  autocmd FileType js,scss,css autocmd BufWritePre <buffer> call StripTrailingWhitespace()
"  autocmd FileType css,scss setlocal foldmethod=marker foldmarker={,}
"  autocmd FileType css,scss nnoremap <silent> <leader>S vi{:sort<CR>
"  autocmd FileType python setlocal foldmethod=indent
"  autocmd FileType markdown setlocal nolist
"  autocmd FileType vim setlocal fdm=indent keywordprg=:help
""}}}
"
"" color schemes {{{
"  NeoBundle 'altercation/vim-colors-solarized' "{{{
"    let g:solarized_termcolors=256
"    let g:solarized_termtrans=1
"  "}}}
"  NeoBundle 'nanotech/jellybeans.vim'
"  NeoBundle 'tomasr/molokai'
"  NeoBundle 'chriskempson/vim-tomorrow-theme'
"  NeoBundle 'chriskempson/base16-vim'
"  NeoBundle 'Zenburn'
"  NeoBundle 'w0ng/vim-hybrid'
"  NeoBundle 'sjl/badwolf'
"  NeoBundle 'zeis/vim-kolor' "{{{
"    let g:kolor_underlined=1
"  "}}}
"
"  exec 'colorscheme '.s:settings.colorscheme
""}}}
"
"" finish loading {{{
"  if exists('g:dotvim_settings.disabled_plugins')
"    for plugin in g:dotvim_settings.disabled_plugins
"      exec 'NeoBundleDisable '.plugin
"    endfor
"  endif
"
"  filetype plugin indent on
"  syntax enable
"  NeoBundleCheck
"}}}
